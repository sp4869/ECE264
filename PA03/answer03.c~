#include<stdlib.h>
#include "answer03.h"
#include<string.h>
#include <stdio.h>
char * strcat_ex(char ** dest,int * n, const char * src)
 {  
    
    int src_len;
    int dst_len;
    src_len  = strlen(src);// length of string
    dst_len = strlen(*dest);// length of destination	
    if(*dest == NULL ||src_len + dst_len + 1 > *n)//check if destination is null, if so then create a buffer and allocate memory
	{
          char * buffer = malloc((1 + 2 * (src_len + dst_len)) *sizeof(char));
          *n = (1 + 2 * (src_len + dst_len)) * sizeof(char);
          strcpy(buffer,*dest);//copy contents of dest into buffer
          free(*dest);//free memory after use
          *dest = buffer;
          strcat(*dest,src);//run strcat which will append the str into dest.
        }
     else
        {
          strcat(*dest,src);
        }
     
     return(*dest); 
} 

char ** explode(const char * str,const char * delims,int * arrLen)

{
  int i;
  int x;
  x = 0;//used to calculate number of delimiters which match the string.
  // Find the number of delimiter characters which appear in the string str.
  for ( i = 0; str[i] != '\0';i++)
	{

  	   if (strchr(delims,str[i])!= NULL)
       	    {
               x++;
             }
        }   
 
  printf("x = %d\n",x); 
  char ** strArr;//create a new string array. it has to be a 2d array because there are rows and columns
  strArr = malloc((x + 1) * sizeof(char *));//Space allocated should be n + 1 characters times char *.
  for (i = 0;i < x + 1;i++)
     {
       strArr[i] = malloc(x + 1 * sizeof(char*));
     }    
  int last;//points to i + 1;
  last = 0;//initialize value to 0
  int arrInd = 0;//new string
  for (i = 0;str[i] != '\0';i++)
   {
      if (strchr(delims,str[i]) != NULL)
       	    {
              
               int difference ;
               difference = i - last ;
               char new_string[difference];
               int j;
               for( j = 0; j < difference;j++)
                {
                   new_string[j] = str[last];
                   last++;
                }
		new_string[difference] = '\0';
                strcpy(strArr[arrInd],new_string); 
                last = i + 1;
                arrInd++;
             }
   }
  int d;
  int e = strlen(str) - last;
  char new_string2[e];
  for( d = 0; d < e;d++)
      {
         new_string2[d] = str[last];
         last++;
      }
  new_string2[e] = '\0';
  strcpy(strArr[arrInd],new_string2);
  int f = 0;
  while(strArr[f]!= '\0')
    {
      f++;
    }
  *arrLen = f;   
  int c;
  for(c = 0;c < x + 1;c++)
    {
  	printf("strArr = %s\n",strArr[c]);
    }
  int s;
  for ( s = 0; s < x + 1;s++) 
  {
    free(strArr[s]);
  }
  free (strArr);
  return(strArr); 
}
     
char * implode(char ** strArr,int len,const char * glue)
{
  int i;
  //int y = strlen(glue); 
  char * new_string;
  char * update_string;
  char * buffer = malloc(sizeof(char) * len * 10);
  for (i = 0;i < len;i++)   
  {  
     new_string = strcat_ex(&strArr[i],&len,glue);
     update_string = strcat_ex(&buffer,&len,new_string);
  }
  free(buffer);
  return(update_string);
 }
        
